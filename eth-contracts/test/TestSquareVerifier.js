var Verifier = artifacts.require('Verifier');

contract('TestSquareVerifier', accounts => {


    const account_one = accounts[0];

    const proofs = {
	  "proof": {
	    "a": [
	      "0x17c2cc7d6f2164b0bf2ad500bb5e59e2eef4f253b9afa247c0734cfb18f08e3b",
	      "0x0a1ea7e057772b913c5bfbea8e38eaf7fd0cc530ea2881548191a23b77db7a3d"
	    ],
	    "b": [
	      [
	        "0x199a19ad561c61e504a3345ab7564d1a88ed2f0474c95bebd9bdb5b27610ff18",
	        "0x26bee2dc0e28d9389131701a96a74364dbec2fed43eeca1376d99b00d70d3c08"
	      ],
	      [
	        "0x0c2d2ce6095ae440a299496483e7dbbcb3aaecd142a61ef87a8b950a0a11cfef",
	        "0x1e8899b3c2403f2ad43a9c982b12fd289592ca58fe9d9fbf99d4b5dece03b61b"
	      ]
	    ],
	    "c": [
	      "0x00e278293b27b1e42842a820c6fb3f843712e0fbff063e2778e4175b0ec34e2f",
	      "0x05a107b27f2828cfccf0f8cfceae401773ad26eb2dc989539d1d13c68749fa91"
	    ]
	  },
	  "inputs": [
	    "0x0000000000000000000000000000000000000000000000000000000000000009",
	    "0x0000000000000000000000000000000000000000000000000000000000000001"
	  ]
	};


    describe('match erc721 spec', function () {
        beforeEach(async function () { 
            this.contract = await Verifier.new({from: account_one});
        }
        );



	    it('should validate when using valid proof', async function () { 

	    	var result = await this.contract.verifyTx([proofs.proof.a,proofs.proof.b,proofs.proof.c],proofs.inputs);

	    	assert.equal(result, true, "should validate when using valid proof");
	        
	    })

	    it('should validate when using invalid proof', async function () { 

	    	//arrange
	    	var fakeA = [
		      "0x17c2cc7d6f2164b0bf2ad500bb5e59e2eef4f253b9afa247c0734cfb18f08e3a",
		      "0x0a1ea7e057772b913c5bfbea8e38eaf7fd0cc530ea2881548191a23b77db7a3d"
		    ];
		    var isError = false;

		    //act
		    try
		    {
	    		var result = await this.contract.verifyTx([fakeA,proofs.proof.b,proofs.proof.c],proofs.inputs);
		    } catch(e)
		    {
		    	isError = true;
		    }

	    	//assert
	    	assert.equal(isError, true, "should validate when using invalid proof");
	        
	    })


    });


});

// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

    
// Test verification with incorrect proof
